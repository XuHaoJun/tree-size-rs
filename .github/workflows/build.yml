name: Build Multi-platform Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            artifact-name: macos-app
            artifact-path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: windows-portable
            artifact-path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies (Rust)
        run: |
          rustup target add ${{ matrix.target }}
      
      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install cmake
      
      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          vcpkg integrate install
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Configure Windows portable build
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Setting up Windows portable configuration"
          # Update tauri.conf.json for Tauri 2.0 portable configuration
          jq '.bundle.windows.nsis = {"installMode": "currentUser"} | .bundle.targets = ["nsis"]' src-tauri/tauri.conf.json > tmp.json
          Remove-Item -Path src-tauri/tauri.conf.json -Force
          Move-Item -Path tmp.json -Destination src-tauri/tauri.conf.json
          # Verify the updated configuration
          Get-Content src-tauri/tauri.conf.json
      
      - name: Build Tauri App
        run: bun run tauri build --target '${{ matrix.target }}'
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error 